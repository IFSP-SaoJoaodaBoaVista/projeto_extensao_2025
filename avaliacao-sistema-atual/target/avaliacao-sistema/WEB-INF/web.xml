<?xml version="1.0" encoding="UTF-8"?>
<!--
    WEB.XML - DESCRITOR DE DEPLOYMENT DA APLICAÇÃO WEB
    ==================================================
    
    Este arquivo é o descritor de deployment (DD) da aplicação web Jakarta EE.
    Define configurações fundamentais sobre como a aplicação deve ser executada
    pelo container de servlets (Tomcat).
    
    RESPONSABILIDADES:
    - Configurar página inicial da aplicação
    - Definir filtros para processamento de requisições
    - Configurar encoding de caracteres (UTF-8)
    - Estabelecer timeout de sessão
    - Mapear recursos estáticos (CSS, JS, imagens)
    - Definir parâmetros de inicialização
    
    VERSÃO JAKARTA EE:
    - Versão 5.0 (sucessor do Java EE)
    - Namespace jakarta.ee (migrado de java.sun.com)
    - Compatível com Tomcat 10.x+
    
    RELACIONAMENTO COM OUTROS ARQUIVOS:
    - Servlets: Mapeamentos automáticos via @WebServlet
    - JSPs: Página inicial definida aqui (index.jsp)
    - Recursos estáticos: CSS, JS, imagens mapeados aqui
    - context.xml: Configurações de contexto complementares
    - pom.xml: Dependências Jakarta EE definidas lá
    
    PADRÃO DE CONFIGURAÇÃO:
    - Configuração híbrida: XML + anotações
    - Servlets usam @WebServlet (anotações)
    - Configurações globais usam web.xml
    
    CICLO DE VIDA:
    1. Container lê web.xml na inicialização
    2. Aplica configurações globais
    3. Carrega e mapeia servlets
    4. Aplicação fica pronta para requisições
-->

<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee 
         https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"
         version="5.0">
    
    <!--
        NOME DE EXIBIÇÃO DA APLICAÇÃO
        =============================
        Nome legível da aplicação exibido em ferramentas de administração.
        Usado por IDEs e servidores para identificação.
    -->
    <display-name>Sistema de Avaliação UNIFAE</display-name>
    
    <!--
        CONFIGURAÇÃO DE PÁGINA INICIAL
        ===============================
        Define qual arquivo será servido quando usuário acessa a raiz da aplicação.
        
        COMPORTAMENTO:
        - URL: http://localhost:8080/avaliacao-sistema/
        - Redireciona para: index.jsp
        - Ordem de prioridade: primeiro arquivo encontrado na lista
        
        RELACIONAMENTO:
        - index.jsp: Página inicial documentada anteriormente
        - Pode incluir múltiplas opções (index.html, index.htm, etc.)
    -->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    
    <!--
        FILTRO DE ENCODING DE CARACTERES
        =================================
        Configura encoding UTF-8 para todas as requisições e respostas.
        Essencial para suporte a caracteres especiais e acentos.
        
        PROBLEMA RESOLVIDO:
        - Caracteres especiais aparecendo como "?" ou símbolos estranhos
        - Acentos não exibidos corretamente
        - Problemas de encoding em formulários
        
        FUNCIONAMENTO:
        1. Filtro intercepta todas as requisições (/*) 
        2. Define encoding UTF-8 na requisição
        3. Define encoding UTF-8 na resposta
        4. Passa requisição para próximo filtro/servlet
    -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <!--
            CLASSE DO FILTRO
            ================
            Usa filtro padrão do Tomcat para encoding.
            Alternativa: implementar filtro customizado.
        -->
        <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
        <!--
            PARÂMETRO DE INICIALIZAÇÃO
            ==========================
            Define UTF-8 como encoding padrão.
            Suporta caracteres de todas as linguagens.
        -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    
    <!--
        MAPEAMENTO DO FILTRO
        ====================
        Define quais URLs serão processadas pelo filtro.
        /* = todas as URLs da aplicação
        
        ORDEM DE EXECUÇÃO:
        1. Requisição chega ao servidor
        2. Filtro de encoding processa primeiro
        3. Outros filtros (se houver)
        4. Servlet de destino
        5. Resposta volta pelos filtros (ordem inversa)
    -->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- 
        Configuração do Jersey (implementação JAX-RS) e sessão da aplicação web:

       1. <servlet>: Define um servlet chamado "Jersey REST Service", utilizando a classe 
       ServletContainer do Jersey, que é responsável por processar as requisições REST. 
       A configuração "jersey.config.server.provider.packages" define o pacote onde estão 
       localizados os recursos REST (classes anotadas com @Path, @GET, @POST etc).

       2. <servlet-mapping>: Mapeia o servlet definido acima para a URL "/api/*", ou seja, 
       todas as requisições que começarem com "/api/" serão encaminhadas para o Jersey 
       tratar.

       3. <session-config>: Define a configuração de sessão da aplicação. 
       O tempo de inatividade permitido é de 30 minutos antes que a sessão seja invalidada automaticamente.
    -->
    <servlet>
        <servlet-name>Jersey REST Service</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.unifae.med.rest</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>Jersey REST Service</servlet-name>
        <url-pattern>/api/*</url-pattern>
    </servlet-mapping>
    <session-config>
        <session-timeout>30</session-timeout>  
    </session-config>
    
    <!--
        MAPEAMENTO DE RECURSOS ESTÁTICOS
        =================================
        Configura como arquivos estáticos (CSS, JS, imagens) são servidos.
        Usa servlet 'default' do Tomcat para servir arquivos estáticos.
        
        BENEFÍCIOS:
        - Performance otimizada para arquivos estáticos
        - Cache automático pelo navegador
        - Compressão automática (se configurada)
        - Não passa por processamento de servlet customizado
        
        TIPOS DE ARQUIVO MAPEADOS:
        - CSS: Folhas de estilo
        - JS: Scripts JavaScript
        - PNG, JPG, GIF: Imagens
        
        RELACIONAMENTO:
        - css/formularios.css: Estilos importados nas JSPs
        - Imagens de interface e ícones
        - Scripts JavaScript para interatividade
    -->
    
    <!-- Mapeamento para arquivos CSS -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>  
        <url-pattern>*.css</url-pattern>      
    </servlet-mapping>
    
    <!-- Mapeamento para arquivos JavaScript -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>       
    </servlet-mapping>
    
    <!-- Mapeamento para imagens PNG -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.png</url-pattern>      
    </servlet-mapping>
    
    <!-- Mapeamento para imagens JPG -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>      
    </servlet-mapping>
    
    <!-- Mapeamento para imagens GIF -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.gif</url-pattern>      
    </servlet-mapping>
           
    <!--
        OBSERVAÇÕES IMPORTANTES
        =======================
        
        1. SERVLETS NÃO MAPEADOS AQUI:
           - Usam anotação @WebServlet nas classes Java
           - Mapeamento automático pelo container
           - Exemplos: AvaliacaoListServlet, TestServlet, etc.
        
        2. ORDEM DE PRECEDÊNCIA:
           - Mapeamentos específicos têm prioridade
           - Mapeamentos por extensão (*.css) têm prioridade sobre /*
           - Servlets anotados têm prioridade sobre web.xml
        
        3. CONFIGURAÇÕES AUSENTES (INTENCIONALMENTE):
           - Security constraints: Sistema não implementa autenticação ainda
           - Error pages: Tratamento de erro feito nos servlets
           - Context parameters: Não necessários para este sistema
           - Listeners: Não utilizados nesta versão
        
        4. COMPATIBILIDADE:
           - Jakarta EE 5.0: Compatível com Tomcat 10.x+
           - Namespace jakarta: Migrado de javax (Java EE legacy)
           - Schema XSD: Validação automática da configuração
    -->
    
</web-app>

